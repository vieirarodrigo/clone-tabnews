Por que renomear o arquivo .env para .env.development é uma boa prática de semântica?;Porque o nome <code>.env.development</code> deixa explícito que o arquivo contém configurações <strong>apenas para o ambiente de desenvolvimento</strong>, enquanto <code>.env</code> é um nome genérico que pode ser confundido com um arquivo de segredos de produção. A semântica clara evita erros.
Em um framework como o Next.js, qual a ordem de prioridade ao carregar variáveis de ambiente de diferentes fontes?;1. <strong><code>process.env</code></strong> (variáveis do sistema/shell)<br>2. <strong><code>.env.development</code></strong> (arquivo do ambiente específico)<br>3. <strong><code>.env</code></strong> (arquivo genérico, com menor prioridade)
Se um arquivo com segredos (como .env) for comitado no Git, basta apagá-lo e fazer um novo commit para resolver o problema de segurança?;<strong>Não.</strong> O arquivo e seu conteúdo ainda existirão no <strong>histórico</strong> do Git. É necessário usar ferramentas específicas (como o BFG Repo-Cleaner) para reescrever o histórico e remover o dado sensível permanentemente.
Qual ferramenta é comumente recomendada para remover dados sensíveis do histórico de um repositório Git de forma segura?;O <strong>BFG Repo-Cleaner</strong>. É uma ferramenta mais simples e segura que a alternativa nativa do Git (<code>git filter-branch</code>).
Qual o principal objetivo de criar scripts como "services:up" e "dev" no package.json para comandos do Docker?;<strong>Abstração e Padronização</strong>. Simplifica os comandos para o time de desenvolvimento (aumentando a produtividade) e cria um padrão que pode ser reutilizado em pipelines de Continuous Integration (CI).
O que o comando npm run dev, definido como "npm run services:up && next dev", faz exatamente?;Ele primeiro executa o script <code>services:up</code> para garantir que os serviços (como o banco de dados) estejam rodando, e só então (<code>&&</code>) inicia a aplicação Next.js.
Qual a diferença fundamental entre os comandos "docker compose down" e "docker compose down -v"?;<code>docker compose down</code> para e remove os contêineres, mas <strong>não</strong> apaga os <strong>volumes</strong> de dados. <code>docker compose down -v</code> (ou <code>--volumes</code>) remove os contêineres <strong>E TAMBÉM</strong> os volumes associados.
No contexto da aula, por que o comando "docker compose down" (sem a flag -v) era suficiente para "zerar" o banco de dados?;Porque a imagem do Postgres estava usando um <strong>volume anônimo</strong>. Diferente de volumes nomeados, os anônimos não são reutilizados quando o contêiner é recriado, então a cada ciclo de <code>down</code> e <code>up</code> um novo volume zerado era criado.
O que é uma vulnerabilidade de "SQL Injection"?;É uma falha de segurança que permite a um atacante injetar e executar comandos SQL maliciosos no banco de dados através de uma entrada de dados não tratada da aplicação.
Qual é a principal técnica para prevenir ataques de SQL Injection?;O uso de <strong>Queries Parametrizadas</strong> (ou Prepared Statements), onde o comando SQL e os dados são enviados ao banco de forma separada, impedindo que os dados sejam interpretados como comandos.
Quais são os 3 estágios do ciclo TDD (Test-Driven Development)?;1. <strong>Red (Vermelho):</strong> Escrever um teste que falha.<br>2. <strong>Green (Verde):</strong> Escrever o código mínimo para o teste passar.<br>3. <strong>Refactor (Refatorar):</strong> Melhorar o código sem alterar seu comportamento.
O que é um "vazamento de conexões" (connection leak) com um banco de dados?;Ocorre quando uma aplicação abre uma conexão com o banco de dados e, por algum motivo (geralmente um erro não tratado), não a fecha. Com o tempo, as conexões abertas esgotam os recursos do banco.
Em JavaScript/Node.js, qual estrutura de código é ideal para garantir que uma conexão com o banco seja sempre fechada, mesmo em caso de erro?;O bloco <strong><code>try...catch...finally</code></strong>. O código para fechar a conexão (<code>client.end()</code>) deve ser colocado no bloco <code>finally</code>, pois ele é executado independentemente de ter ocorrido um erro ou não.
No PostgreSQL, qual "view" do sistema pode ser usada para consultar informações sobre as conexões ativas em tempo real?;A view <strong><code>pg_stat_activity</code></strong>. Ela permite ver detalhes como o cliente, o banco de dados ao qual está conectado (<code>datname</code>) e a query em execução.
Para que serve o padrão ISO 8601 no contexto de APIs e timestamps?;Serve para representar datas e horas de forma padronizada e inequívoca, geralmente incluindo informações de fuso horário (como o "Z" para UTC). Exemplo: <code>new Date().toISOString()</code>.
Qual convenção de nomenclatura (case convention) é comum para chaves em respostas JSON de uma API?;<strong><code>snake_case</code></strong> (ex: <code>"updated_at"</code>, <code>"max_connections"</code>), enquanto o código JavaScript internamente costuma usar <code>lowerCamelCase</code>.