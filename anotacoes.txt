### Git e GitHub

# O que é Git?

O Git é um sistema de controle de versão distribuído, gratuito e de código aberto, que permite rastrear e gerenciar as alterações em um projeto de software ao longo do tempo. Ele foi criado por Linus Torvalds em 2005. O Git é uma ferramenta essencial para desenvolvedores, facilitando a colaboração em projetos, a criação de versões e a reversão de alterações caso necessário. 

O Git é como se fosse um vídeo no meu computador.

# O que é GitHub?

O GitHub é uma plataforma online que funciona como um grande repositório de código de programação, onde desenvolvedores podem armazenar, compartilhar e colaborar em projetos. É essencialmente uma rede social para programadores, facilitando o trabalho em equipe e a colaboração em projetos de código aberto. 

O GitHub é como o YouTube, uma plataforma que posso compartilhar ou assistir outros videos.

Para criar uma conta no GitHub: https://docs.github.com/pt/get-started/start-your-journey/creating-an-account-on-github

Para criar um repositório no GitHub: https://docs.github.com/pt/repositories/creating-and-managing-repositories/creating-a-new-repository

### Codespaces

# O que é codespaces?

Um codespace é um ambiente de desenvolvimento virtual e hospedado na nuvem, oferecido pelo GitHub. Permite que os desenvolvedores escrevam, testem e depurem código diretamente na nuvem, sem a necessidade de configurações locais complexas. 

Como criar um codespace para um repositório: https://docs.github.com/pt/codespaces/developing-in-a-codespace/creating-a-codespace-for-a-repository

### Atenção

Aprenda a função das coisas, não se preenda a gostos pessoais.

### Anotações pessoais

O Git é um controlador de versões, ele cria e gerencia várias versões do projeto. Ele faz uma cópia sempre que você o chama, não copiando totalmente, mas indicando as alterações que foram realizadas em cada versão.

O GitHub é uma rede social, no qual posso compartilhar projetos, acessar, editar, copiar e interagir com projetos de outras pessoas.

O codespaces é um espaço para eu desenvolver meus projetos, ele cria uma máquina virtual com o vscode e um terminal, no qual me permite desenvolver sem as limitações de um computador físico mais modesto.

### Referências:

https://www.atlassian.com/br/git/tutorials/what-is-git
https://docs.github.com/pt/get-startedstart-your-journey/about-github-and-git
https://docs.github.com/pt/codespaces/about-codespaces/what-are-codespaces

#################################

"Se você quiser fazer uma torta de maçã a partir do zero, você deve primeiro inventar o Universo." - Carl Sagan

Não é possível hoje começar algo do zero, vamos precisar subir no ombro de gigantes e alçar novos voos. Isso não é um problema, podemos fazer coisas incríveis em comunidade.

### Node.js

# O que é node.js

Node.js é um ambiente de execução JavaScript do lado do servidor, que permite aos desenvolvedores criar aplicações web, APIs, e outras ferramentas de linha de comando utilizando a linguagem JavaScript.

Node.js é como uma cozinha que permite preparar receitas (aplicações) usando um fogão (ambiente de execução) que entende a linguagem do JavaScript.

# Terminal 

Terminal é uma interface de linha de comando que permite interagir com um sistema operacional através de comandos digitados, sme a necissade de uma interface gráfica.

Terminal é como um pedaço de papel, ele permite que você intereja com o sistema operacional, enquanto o shell é o "motor" que interpreta e executa seus comandos.

# Shell

É uma interface que permite aos utilizadores interagir com um sistema operacional.

É como a casca de um ovo, que protege o conteúdo interno.

# NVM (Node Version Manager)

NVM é uma ferramenta que permite aos desenvolvedores gerenciar várias cersões do Node.js em um único sistema operacional.

# Para acessar os detalhes do NVM use:

nvm --help (node version manager ajuda)

### Como instalar uma versão específica do Node.js?

1º Vamos precisar listar as versões disponiveis,vamos usar o comando: 

nvm ls (node version manager list)

2º Escolha a versão, por exemplo lts/hydrogen, para isso use os comandos:

nvm install lts/hydrogen (node version manager install version)

### Como deixar a versão anterior como padrão

Para isso vamos precisar definir como padrão a versão deseja, conforme abaixo:

nvm alias default <version> (node version manager apelido padrão versão)

### Declarar a versão utilizada no projeto

Para deixar claro para outras pessoas e padronizar o projeto, precisamos deixar claro qual versão do node vai ser utilizado, fazemos isso da forma abaixo:

1º Crie o arquivo abaixo na pasta raiz do projeto.
.nvmrc (node version manager run commands)

2º Dentro escreva a versão desejada e pule uma linha.

Exemplo:
"
lts/hydrogen

"

### Next.js

É um framework React para construir aplicações web, que fornece uma estrutura e recursos extras para otimizar o desenvolvimento e melhorar o desempenho das aplicações.

É como um motor que facilita a construção de aplicações web com React.

Também para o Next e o React, é necessário indicar no projeto quais versões foram utilizadas. Para isso vamos:

1º Precisamos inicializar o node no nosso projeto e esse comando vai criar um arquivo package.json, usamos o comando:

npm init (node package manager initialize)

2º Vamos escolher a versão do next.js que será utilizado, nesse exemplo vamos usar a versão 13.1.6:

npm install next@13.1.6 (node package manager install <version>)

### React

É uma biblioteca JavaScript de software livre, popularmente utilizada para construir interfaces de usuário do lado do cliente (front-end).

É como um sistema de blocos de construção para interfaces de usuário, onde cada bloco (componente) pode ser utilizado e combinado para criar aplicações complexas.

É necessário instalar a versão do react, nesse exemplo é a 18.2.0:

npm install react@18.2.0 (node package install <version>)

O ponto é que o React foi separado entre seu core e suas renderizações, pois ele é extremamente vasto.

Para HTML, quem renderiza é o DOM, para isso vamos instalar a versão do react DOM, para manipula-lo:

npm install react-dom@18.2.0 (node package install <version>)






O que é um serviço web?

Protocolos

HTTP
FTP
SMTP
UDP
IP

UDP TCP

next dev
"dev": "next dev"


Ctrl + L

pages

index.js 

function Home() {
    return <h1>Teste</h1>
}

export default Home;

deploy



#################
Control History

Versionamento de código

sccs -> rcs -> cvs -> svn -> git
       centralizado        | distribuído

Merge

Merge conflict

Clone

ls -la

.git

Diff

Delta encoding

Blob

git log

Commit


3 estágios

1 - Modified
2 - Staged
3 - Commit

git log --stat

git status

Unstrack file

Build

.gitignore

git add nome do arquivo

git commit



git log --oneline

Working Directory

Diff

git diff

Newline

Amend

git commit --amend 

Gits são imutáveis












origin/main

branch

git push

pull

git commit -m "Mensagem"

git push --force ou --f







Continuos deployment

Client / Server


Hospedagem de site

Deploy

Continuos integration -> Build


Principle least privilege

Cada commit deployado, kkk, tem uma url unica









N1: Ser lembrado indivualmente; (Anotar tarefas no papel, em cima da mesa)
N2: Ser lembrado em grupo; (Quadro kambam)
N3: Expandir conhecimento; (Trello ou Github)
N4: Gerar metas. (Jira)


Issue inception

Milestones
    - Milestone 0: Em construção

Estágio 1 - Início
Estágio 2 - Progresso
Estágio 3 - Conclusão

Issues: 

Colocar o site num domínio .com.br
Definir estilização do código e configurar editor
Programar página de "Em construção"










Estilização de código é essencial

- [ ] - Ligar sincronização do editor
- [ ] - Configurar o EditorConfig
- [ ] - Configurar o Prettier


EditorConfig

.EditorConfig

root = true

[*] 
indent_style = space
indent_size = 2


Prettier / Standard js

npm install prettier -D ou --save-dev


no package.json
"lint:check": "prettier --check ."
"lint:fix": "prettier --write ."







DNS 2 - níveis

IP é o endereço de cada computador

DNS é um apelido

DNS <- Computador -> servidor
    ->

Recursive Resolver <- Computador
                    ->

Recursive Resolver -> Root Server
                   <-
                   -> TLD 
                   <-
                   -> Authoritative Server

FQDN

Root Domain - TLD - Authoritative Server - TTL
            ccTLD/gTLD












### Dia 12 - DNS (Prática)

Task da insue "Coloca o site num domínio .com.br"

- [ ] - Registrar domínio próprio
- [ ] - Configurar Servidor de DNS

Registrant -> Registrar -> Registry -> TLD

whatismydns -> NS

vieirarodrigo.com.br


Dizer para vercel o nosso domínio

Dizer para a TLD o nosso DNS


### Git e GitHub

# O que é Git?

O Git é um sistema de controle de versão distribuído, gratuito e de código aberto, que permite rastrear e gerenciar as alterações em um projeto de software ao longo do tempo. Ele foi criado por Linus Torvalds em 2005. O Git é uma ferramenta essencial para desenvolvedores, facilitando a colaboração em projetos, a criação de versões e a reversão de alterações caso necessário. 

O Git é como se fosse um vídeo no meu computador.

# O que é GitHub?

O GitHub é uma plataforma online que funciona como um grande repositório de código de programação, onde desenvolvedores podem armazenar, compartilhar e colaborar em projetos. É essencialmente uma rede social para programadores, facilitando o trabalho em equipe e a colaboração em projetos de código aberto. 

O GitHub é como o YouTube, uma plataforma que posso compartilhar ou assistir outros videos.

Para criar uma conta no GitHub: https://docs.github.com/pt/get-started/start-your-journey/creating-an-account-on-github

Para criar um repositório no GitHub: https://docs.github.com/pt/repositories/creating-and-managing-repositories/creating-a-new-repository

### Codespaces

# O que é codespaces?

Um codespace é um ambiente de desenvolvimento virtual e hospedado na nuvem, oferecido pelo GitHub. Permite que os desenvolvedores escrevam, testem e depurem código diretamente na nuvem, sem a necessidade de configurações locais complexas. 

Como criar um codespace para um repositório: https://docs.github.com/pt/codespaces/developing-in-a-codespace/creating-a-codespace-for-a-repository

### Atenção

Aprenda a função das coisas, não se preenda a gostos pessoais.

### Anotações pessoais

O Git é um controlador de versões, ele cria e gerencia várias versões do projeto. Ele faz uma cópia sempre que você o chama, não copiando totalmente, mas indicando as alterações que foram realizadas em cada versão.

O GitHub é uma rede social, no qual posso compartilhar projetos, acessar, editar, copiar e interagir com projetos de outras pessoas.

O codespaces é um espaço para eu desenvolver meus projetos, ele cria uma máquina virtual com o vscode e um terminal, no qual me permite desenvolver sem as limitações de um computador físico mais modesto.

### Referências:

https://www.atlassian.com/br/git/tutorials/what-is-git
https://docs.github.com/pt/get-startedstart-your-journey/about-github-and-git
https://docs.github.com/pt/codespaces/about-codespaces/what-are-codespaces

#################################

"Se você quiser fazer uma torta de maçã a partir do zero, você deve primeiro inventar o Universo." - Carl Sagan

Não é possível hoje começar algo do zero, vamos precisar subir no ombro de gigantes e alçar novos voos. Isso não é um problema, podemos fazer coisas incríveis em comunidade.

### Node.js

# O que é node.js

Node.js é um ambiente de execução JavaScript do lado do servidor, que permite aos desenvolvedores criar aplicações web, APIs, e outras ferramentas de linha de comando utilizando a linguagem JavaScript.

Node.js é como uma cozinha que permite preparar receitas (aplicações) usando um fogão (ambiente de execução) que entende a linguagem do JavaScript.

# Terminal 

Terminal é uma interface de linha de comando que permite interagir com um sistema operacional através de comandos digitados, sme a necissade de uma interface gráfica.

Terminal é como um pedaço de papel, ele permite que você intereja com o sistema operacional, enquanto o shell é o "motor" que interpreta e executa seus comandos.

# Shell

É uma interface que permite aos utilizadores interagir com um sistema operacional.

É como a casca de um ovo, que protege o conteúdo interno.

# NVM (Node Version Manager)

NVM é uma ferramenta que permite aos desenvolvedores gerenciar várias cersões do Node.js em um único sistema operacional.

# Para acessar os detalhes do NVM use:

nvm --help (node version manager ajuda)

### Como instalar uma versão específica do Node.js?

1º Vamos precisar listar as versões disponiveis,vamos usar o comando: 

nvm ls (node version manager list)

2º Escolha a versão, por exemplo lts/hydrogen, para isso use os comandos:

nvm install lts/hydrogen (node version manager install version)

### Como deixar a versão anterior como padrão

Para isso vamos precisar definir como padrão a versão deseja, conforme abaixo:

nvm alias default <version> (node version manager apelido padrão versão)

### Declarar a versão utilizada no projeto

Para deixar claro para outras pessoas e padronizar o projeto, precisamos deixar claro qual versão do node vai ser utilizado, fazemos isso da forma abaixo:

1º Crie o arquivo abaixo na pasta raiz do projeto.
.nvmrc (node version manager run commands)

2º Dentro escreva a versão desejada e pule uma linha.

Exemplo:
"
lts/hydrogen

"

### Next.js

É um framework React para construir aplicações web, que fornece uma estrutura e recursos extras para otimizar o desenvolvimento e melhorar o desempenho das aplicações.

É como um motor que facilita a construção de aplicações web com React.

Também para o Next e o React, é necessário indicar no projeto quais versões foram utilizadas. Para isso vamos:

1º Precisamos inicializar o node no nosso projeto e esse comando vai criar um arquivo package.json, usamos o comando:

npm init (node package manager initialize)

2º Vamos escolher a versão do next.js que será utilizado, nesse exemplo vamos usar a versão 13.1.6:

npm install next@13.1.6 (node package manager install <version>)

### React

É uma biblioteca JavaScript de software livre, popularmente utilizada para construir interfaces de usuário do lado do cliente (front-end).

É como um sistema de blocos de construção para interfaces de usuário, onde cada bloco (componente) pode ser utilizado e combinado para criar aplicações complexas.

É necessário instalar a versão do react, nesse exemplo é a 18.2.0:

npm install react@18.2.0 (node package install <version>)

O ponto é que o React foi separado entre seu core e suas renderizações, pois ele é extremamente vasto.

Para HTML, quem renderiza é o DOM, para isso vamos instalar a versão do react DOM, para manipula-lo:

npm install react-dom@18.2.0 (node package install <version>)






O que é um serviço web?

Protocolos

HTTP
FTP
SMTP
UDP
IP

UDP TCP

next dev
"dev": "next dev"


Ctrl + L

pages

index.js 

function Home() {
    return <h1>Teste</h1>
}

export default Home;

deploy



#################
Control History

Versionamento de código

sccs -> rcs -> cvs -> svn -> git
       centralizado        | distribuído

Merge

Merge conflict

Clone

ls -la

.git

Diff

Delta encoding

Blob

git log

Commit


3 estágios

1 - Modified
2 - Staged
3 - Commit

git log --stat

git status

Unstrack file

Build

.gitignore

git add nome do arquivo

git commit



git log --oneline

Working Directory

Diff

git diff

Newline

Amend

git commit --amend 

Gits são imutáveis












origin/main

branch

git push

pull

git commit -m "Mensagem"

git push --force ou --f







Continuos deployment

Client / Server


Hospedagem de site

Deploy

Continuos integration -> Build


Principle least privilege

Cada commit deployado, kkk, tem uma url unica









N1: Ser lembrado indivualmente; (Anotar tarefas no papel, em cima da mesa)
N2: Ser lembrado em grupo; (Quadro kambam)
N3: Expandir conhecimento; (Trello ou Github)
N4: Gerar metas. (Jira)


Issue inception

Milestones
    - Milestone 0: Em construção

Estágio 1 - Início
Estágio 2 - Progresso
Estágio 3 - Conclusão

Issues: 

Colocar o site num domínio .com.br
Definir estilização do código e configurar editor
Programar página de "Em construção"










Estilização de código é essencial

- [ ] - Ligar sincronização do editor
- [ ] - Configurar o EditorConfig
- [ ] - Configurar o Prettier


EditorConfig

.EditorConfig

root = true

[*] 
indent_style = space
indent_size = 2


Prettier / Standard js

npm install prettier -D ou --save-dev


no package.json
"lint:check": "prettier --check ."
"lint:fix": "prettier --write ."







DNS 2 - níveis

IP é o endereço de cada computador

DNS é um apelido

DNS <- Computador -> servidor
    ->

Recursive Resolver <- Computador
                    ->

Recursive Resolver -> Root Server
                   <-
                   -> TLD 
                   <-
                   -> Authoritative Server

FQDN

Root Domain - TLD - Authoritative Server - TTL
            ccTLD/gTLD












### Dia 12 - DNS (Prática)

Task da insue "Coloca o site num domínio .com.br"

- [ ] - Registrar domínio próprio
- [ ] - Configurar Servidor de DNS

Registrant -> Registrar -> Registry -> TLD

whatismydns -> NS

vieirarodrigo.com.br


Dizer para vercel o nosso domínio

Dizer para a TLD o nosso DNS


dig site A +trace





###  Dia 13 - 

As pessoas estão se aproximando ou se afastando?

Teoria McDonalds


99.9% Uptime
9h/Ano ou 44min/mês

SLA

Status Pages

vercel status ou aws status ou github status

RDS






### Dia 14 - Milestone 1: Fundação

## D1 - Inauguração Milestone 1: Fundação

Front-end

Milestone 1: Fundação
  Proposta de arquitetura e pastas
  Testes automatizados
  Banco de dados (Local)
  Migrations
  Continuos Integration
  Linter de código
  Linter de commits
  Banco de dados (homologação e produção)
  Tipo da licença


## D2 - Uma história macabra sobre "Overengineering"

Overengineering - Excesso de engenharia (Complexo)

Você quer estar aqui

Underengineering - (Simples e mal feito)

Um software deve ser modificável


## D3 - Porposta de Arquitetura e pastas

1. Arquitetura de software

MVC - Model View Controler

2. Organização das pastas e arquivos

root
  pages
    index.js
  models
    user.js
    content.js
    password.js
  infra
    database.js
    migration
    provisioning
      staging
      production
  tests

## D4 - Bônus: PoC e MVP ajudam mesmo?

PoC - Proof of Concept
MVP - Minimum Viable Product